
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800217c  0800217c  0000317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002194  08002194  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002194  08002194  00003194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800219c  0800219c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080021b0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080021b0  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000834b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000062  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007bb3  00000000  00000000  0000c3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001494  00000000  00000000  00013f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a0  00000000  00000000  00015430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c49ea  00000000  00000000  00015ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000511  00000000  00000000  000da4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000201f6  00000000  00000000  000da9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fabc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a24  00000000  00000000  000fac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002164 	.word	0x08002164

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002164 	.word	0x08002164

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000568 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000534:	f001 fdd8 	bl	80020e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	@ (8000570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	@ (800057c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 fddd 	bl	800211c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000562:	f001 fbff 	bl	8001d64 <main>
  bx  lr    
 8000566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000574:	080021a4 	.word	0x080021a4
  ldr r2, =_sbss
 8000578:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800057c:	20000074 	.word	0x20000074

08000580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC_IRQHandler>
	...

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <HAL_Init+0x40>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <HAL_Init+0x40>)
 800059a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800059e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <HAL_Init+0x40>)
 80005a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f931 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f001 fcf6 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023c00 	.word	0x40023c00

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f93b 	bl	8000862 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000604:	f000 f911 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000008 	.word	0x20000008
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	@ (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000028 	.word	0x20000028

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	@ (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <HAL_Delay+0x44>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000004 	.word	0x20000004

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	@ (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	@ (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	@ 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff47 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff5c 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffb0 	bl	80007d0 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	@ 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
 8000896:	e165      	b.n	8000b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000898:	2201      	movs	r2, #1
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8154 	bne.w	8000b5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d005      	beq.n	80008ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d130      	bne.n	8000930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4013      	ands	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	091b      	lsrs	r3, r3, #4
 800091a:	f003 0201 	and.w	r2, r3, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b03      	cmp	r3, #3
 800093a:	d017      	beq.n	800096c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d123      	bne.n	80009c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	69b9      	ldr	r1, [r7, #24]
 80009bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0203 	and.w	r2, r3, #3
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 80ae 	beq.w	8000b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b5d      	ldr	r3, [pc, #372]	@ (8000b7c <HAL_GPIO_Init+0x300>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000b7c <HAL_GPIO_Init+0x300>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b5a      	ldr	r3, [pc, #360]	@ (8000b7c <HAL_GPIO_Init+0x300>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a1e:	4a58      	ldr	r2, [pc, #352]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4f      	ldr	r2, [pc, #316]	@ (8000b84 <HAL_GPIO_Init+0x308>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d025      	beq.n	8000a96 <HAL_GPIO_Init+0x21a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b88 <HAL_GPIO_Init+0x30c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d01f      	beq.n	8000a92 <HAL_GPIO_Init+0x216>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4d      	ldr	r2, [pc, #308]	@ (8000b8c <HAL_GPIO_Init+0x310>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d019      	beq.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b90 <HAL_GPIO_Init+0x314>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0x20e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	@ (8000b94 <HAL_GPIO_Init+0x318>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00d      	beq.n	8000a86 <HAL_GPIO_Init+0x20a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <HAL_GPIO_Init+0x31c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d007      	beq.n	8000a82 <HAL_GPIO_Init+0x206>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	@ (8000b9c <HAL_GPIO_Init+0x320>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_GPIO_Init+0x202>
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	e00c      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a7e:	2307      	movs	r3, #7
 8000a80:	e00a      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a82:	2305      	movs	r3, #5
 8000a84:	e008      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a96:	2300      	movs	r3, #0
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa8:	4935      	ldr	r1, [pc, #212]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b04:	4a26      	ldr	r2, [pc, #152]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b58:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <HAL_GPIO_Init+0x324>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3301      	adds	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	f67f ae96 	bls.w	8000898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3724      	adds	r7, #36	@ 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40013c00 	.word	0x40013c00

08000ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb4:	787b      	ldrb	r3, [r7, #1]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc0:	e003      	b.n	8000bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	041a      	lsls	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	619a      	str	r2, [r3, #24]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	041a      	lsls	r2, r3, #16
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0cc      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c20:	4b68      	ldr	r3, [pc, #416]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d90c      	bls.n	8000c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c2e:	4b65      	ldr	r3, [pc, #404]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c36:	4b63      	ldr	r3, [pc, #396]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d001      	beq.n	8000c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e0b8      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d020      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c60:	4b59      	ldr	r3, [pc, #356]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4a58      	ldr	r2, [pc, #352]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4a52      	ldr	r2, [pc, #328]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c84:	4b50      	ldr	r3, [pc, #320]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	494d      	ldr	r1, [pc, #308]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d044      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d107      	bne.n	8000cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d119      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e07f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d003      	beq.n	8000cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d107      	bne.n	8000cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cca:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d109      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e06f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cda:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e067      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f023 0203 	bic.w	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	4934      	ldr	r1, [pc, #208]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fca8 	bl	8000650 <HAL_GetTick>
 8000d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d02:	e00a      	b.n	8000d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d04:	f7ff fca4 	bl	8000650 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e04f      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 020c 	and.w	r2, r3, #12
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d1eb      	bne.n	8000d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d2c:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d20c      	bcs.n	8000d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3a:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d001      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e032      	b.n	8000dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4916      	ldr	r1, [pc, #88]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d009      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	490e      	ldr	r1, [pc, #56]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d92:	f000 f855 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	490a      	ldr	r1, [pc, #40]	@ (8000dcc <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	5ccb      	ldrb	r3, [r1, r3]
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc08 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	0800217c 	.word	0x0800217c
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_RCC_GetHCLKFreq+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_RCC_GetHCLKFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	0a9b      	lsrs	r3, r3, #10
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	4903      	ldr	r1, [pc, #12]	@ (8000e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	0800218c 	.word	0x0800218c

08000e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e1c:	f7ff ffdc 	bl	8000dd8 <HAL_RCC_GetHCLKFreq>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	0b5b      	lsrs	r3, r3, #13
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	4903      	ldr	r1, [pc, #12]	@ (8000e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	0800218c 	.word	0x0800218c

08000e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e44:	b0ae      	sub	sp, #184	@ 0xb8
 8000e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e66:	4bcb      	ldr	r3, [pc, #812]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	f200 8206 	bhi.w	8001280 <HAL_RCC_GetSysClockFreq+0x440>
 8000e74:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000eb1 	.word	0x08000eb1
 8000e80:	08001281 	.word	0x08001281
 8000e84:	08001281 	.word	0x08001281
 8000e88:	08001281 	.word	0x08001281
 8000e8c:	08000eb9 	.word	0x08000eb9
 8000e90:	08001281 	.word	0x08001281
 8000e94:	08001281 	.word	0x08001281
 8000e98:	08001281 	.word	0x08001281
 8000e9c:	08000ec1 	.word	0x08000ec1
 8000ea0:	08001281 	.word	0x08001281
 8000ea4:	08001281 	.word	0x08001281
 8000ea8:	08001281 	.word	0x08001281
 8000eac:	080010b1 	.word	0x080010b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000eb0:	4bb9      	ldr	r3, [pc, #740]	@ (8001198 <HAL_RCC_GetSysClockFreq+0x358>)
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8000eb6:	e1e7      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000eb8:	4bb8      	ldr	r3, [pc, #736]	@ (800119c <HAL_RCC_GetSysClockFreq+0x35c>)
 8000eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8000ebe:	e1e3      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ec0:	4bb4      	ldr	r3, [pc, #720]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ecc:	4bb1      	ldr	r3, [pc, #708]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d071      	beq.n	8000fbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed8:	4bae      	ldr	r3, [pc, #696]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ee4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000efe:	4622      	mov	r2, r4
 8000f00:	462b      	mov	r3, r5
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	f04f 0100 	mov.w	r1, #0
 8000f0a:	0159      	lsls	r1, r3, #5
 8000f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000f10:	0150      	lsls	r0, r2, #5
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4621      	mov	r1, r4
 8000f18:	1a51      	subs	r1, r2, r1
 8000f1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8000f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8000f30:	4649      	mov	r1, r9
 8000f32:	018b      	lsls	r3, r1, #6
 8000f34:	4641      	mov	r1, r8
 8000f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	018a      	lsls	r2, r1, #6
 8000f3e:	4641      	mov	r1, r8
 8000f40:	1a51      	subs	r1, r2, r1
 8000f42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000f44:	4649      	mov	r1, r9
 8000f46:	eb63 0301 	sbc.w	r3, r3, r1
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8000f58:	4649      	mov	r1, r9
 8000f5a:	00cb      	lsls	r3, r1, #3
 8000f5c:	4641      	mov	r1, r8
 8000f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f62:	4641      	mov	r1, r8
 8000f64:	00ca      	lsls	r2, r1, #3
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4622      	mov	r2, r4
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f72:	462b      	mov	r3, r5
 8000f74:	460a      	mov	r2, r1
 8000f76:	eb42 0303 	adc.w	r3, r2, r3
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000f88:	4629      	mov	r1, r5
 8000f8a:	024b      	lsls	r3, r1, #9
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8000f92:	4621      	mov	r1, r4
 8000f94:	024a      	lsls	r2, r1, #9
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000fa8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000fac:	f7ff f92a 	bl	8000204 <__aeabi_uldivmod>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000fba:	e067      	b.n	800108c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fbc:	4b75      	ldr	r3, [pc, #468]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000fde:	4622      	mov	r2, r4
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	f04f 0100 	mov.w	r1, #0
 8000fea:	0159      	lsls	r1, r3, #5
 8000fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000ff0:	0150      	lsls	r0, r2, #5
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	1a51      	subs	r1, r2, r1
 8000ffa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001010:	4649      	mov	r1, r9
 8001012:	018b      	lsls	r3, r1, #6
 8001014:	4641      	mov	r1, r8
 8001016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800101a:	4641      	mov	r1, r8
 800101c:	018a      	lsls	r2, r1, #6
 800101e:	4641      	mov	r1, r8
 8001020:	ebb2 0a01 	subs.w	sl, r2, r1
 8001024:	4649      	mov	r1, r9
 8001026:	eb63 0b01 	sbc.w	fp, r3, r1
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001036:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800103a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800103e:	4692      	mov	sl, r2
 8001040:	469b      	mov	fp, r3
 8001042:	4623      	mov	r3, r4
 8001044:	eb1a 0303 	adds.w	r3, sl, r3
 8001048:	623b      	str	r3, [r7, #32]
 800104a:	462b      	mov	r3, r5
 800104c:	eb4b 0303 	adc.w	r3, fp, r3
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800105e:	4629      	mov	r1, r5
 8001060:	028b      	lsls	r3, r1, #10
 8001062:	4621      	mov	r1, r4
 8001064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001068:	4621      	mov	r1, r4
 800106a:	028a      	lsls	r2, r1, #10
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001074:	2200      	movs	r2, #0
 8001076:	673b      	str	r3, [r7, #112]	@ 0x70
 8001078:	677a      	str	r2, [r7, #116]	@ 0x74
 800107a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800107e:	f7ff f8c1 	bl	8000204 <__aeabi_uldivmod>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4613      	mov	r3, r2
 8001088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800108c:	4b41      	ldr	r3, [pc, #260]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	3301      	adds	r3, #1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800109e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80010a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80010ae:	e0eb      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b0:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d06b      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x354>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	099b      	lsrs	r3, r3, #6
 80010ce:	2200      	movs	r2, #0
 80010d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80010d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010da:	663b      	str	r3, [r7, #96]	@ 0x60
 80010dc:	2300      	movs	r3, #0
 80010de:	667b      	str	r3, [r7, #100]	@ 0x64
 80010e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80010e4:	4622      	mov	r2, r4
 80010e6:	462b      	mov	r3, r5
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	f04f 0100 	mov.w	r1, #0
 80010f0:	0159      	lsls	r1, r3, #5
 80010f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010f6:	0150      	lsls	r0, r2, #5
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4621      	mov	r1, r4
 80010fe:	1a51      	subs	r1, r2, r1
 8001100:	61b9      	str	r1, [r7, #24]
 8001102:	4629      	mov	r1, r5
 8001104:	eb63 0301 	sbc.w	r3, r3, r1
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001116:	4659      	mov	r1, fp
 8001118:	018b      	lsls	r3, r1, #6
 800111a:	4651      	mov	r1, sl
 800111c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001120:	4651      	mov	r1, sl
 8001122:	018a      	lsls	r2, r1, #6
 8001124:	4651      	mov	r1, sl
 8001126:	ebb2 0801 	subs.w	r8, r2, r1
 800112a:	4659      	mov	r1, fp
 800112c:	eb63 0901 	sbc.w	r9, r3, r1
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800113c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001140:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001144:	4690      	mov	r8, r2
 8001146:	4699      	mov	r9, r3
 8001148:	4623      	mov	r3, r4
 800114a:	eb18 0303 	adds.w	r3, r8, r3
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	462b      	mov	r3, r5
 8001152:	eb49 0303 	adc.w	r3, r9, r3
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001164:	4629      	mov	r1, r5
 8001166:	024b      	lsls	r3, r1, #9
 8001168:	4621      	mov	r1, r4
 800116a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800116e:	4621      	mov	r1, r4
 8001170:	024a      	lsls	r2, r1, #9
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800117a:	2200      	movs	r2, #0
 800117c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800117e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001180:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001184:	f7ff f83e 	bl	8000204 <__aeabi_uldivmod>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4613      	mov	r3, r2
 800118e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001192:	e065      	b.n	8001260 <HAL_RCC_GetSysClockFreq+0x420>
 8001194:	40023800 	.word	0x40023800
 8001198:	00f42400 	.word	0x00f42400
 800119c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <HAL_RCC_GetSysClockFreq+0x458>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	2200      	movs	r2, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	4611      	mov	r1, r2
 80011ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80011b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80011b2:	2300      	movs	r3, #0
 80011b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80011b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80011ba:	4642      	mov	r2, r8
 80011bc:	464b      	mov	r3, r9
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	f04f 0100 	mov.w	r1, #0
 80011c6:	0159      	lsls	r1, r3, #5
 80011c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011cc:	0150      	lsls	r0, r2, #5
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4641      	mov	r1, r8
 80011d4:	1a51      	subs	r1, r2, r1
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	4649      	mov	r1, r9
 80011da:	eb63 0301 	sbc.w	r3, r3, r1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80011ec:	4659      	mov	r1, fp
 80011ee:	018b      	lsls	r3, r1, #6
 80011f0:	4651      	mov	r1, sl
 80011f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011f6:	4651      	mov	r1, sl
 80011f8:	018a      	lsls	r2, r1, #6
 80011fa:	4651      	mov	r1, sl
 80011fc:	1a54      	subs	r4, r2, r1
 80011fe:	4659      	mov	r1, fp
 8001200:	eb63 0501 	sbc.w	r5, r3, r1
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	00eb      	lsls	r3, r5, #3
 800120e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001212:	00e2      	lsls	r2, r4, #3
 8001214:	4614      	mov	r4, r2
 8001216:	461d      	mov	r5, r3
 8001218:	4643      	mov	r3, r8
 800121a:	18e3      	adds	r3, r4, r3
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	464b      	mov	r3, r9
 8001220:	eb45 0303 	adc.w	r3, r5, r3
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001232:	4629      	mov	r1, r5
 8001234:	028b      	lsls	r3, r1, #10
 8001236:	4621      	mov	r1, r4
 8001238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800123c:	4621      	mov	r1, r4
 800123e:	028a      	lsls	r2, r1, #10
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001248:	2200      	movs	r2, #0
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800124c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800124e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001252:	f7fe ffd7 	bl	8000204 <__aeabi_uldivmod>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4613      	mov	r3, r2
 800125c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_RCC_GetSysClockFreq+0x458>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	0f1b      	lsrs	r3, r3, #28
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800126e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800127e:	e003      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800128c:	4618      	mov	r0, r3
 800128e:	37b8      	adds	r7, #184	@ 0xb8
 8001290:	46bd      	mov	sp, r7
 8001292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	00f42400 	.word	0x00f42400

080012a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e28d      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8083 	beq.w	80013c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012c0:	4b94      	ldr	r3, [pc, #592]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d019      	beq.n	8001300 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80012cc:	4b91      	ldr	r3, [pc, #580]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80012d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b84      	ldr	r3, [pc, #528]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x124>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e25a      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x90>
 8001322:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7b      	ldr	r2, [pc, #492]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xcc>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0xb4>
 800133a:	4b76      	ldr	r3, [pc, #472]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a75      	ldr	r2, [pc, #468]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b73      	ldr	r3, [pc, #460]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a72      	ldr	r2, [pc, #456]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xcc>
 8001354:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6e      	ldr	r2, [pc, #440]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b6c      	ldr	r3, [pc, #432]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6b      	ldr	r2, [pc, #428]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff f96c 	bl	8000650 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff f968 	bl	8000650 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e21f      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b61      	ldr	r3, [pc, #388]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xdc>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff f958 	bl	8000650 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff f954 	bl	8000650 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e20b      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b57      	ldr	r3, [pc, #348]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x104>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06f      	beq.n	80014b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80013d2:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d017      	beq.n	800140e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80013de:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80013ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b44      	ldr	r3, [pc, #272]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x186>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1d3      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4937      	ldr	r1, [pc, #220]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <HAL_RCC_OscConfig+0x278>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff f901 	bl	8000650 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff f8fd 	bl	8000650 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1b4      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4925      	ldr	r1, [pc, #148]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <HAL_RCC_OscConfig+0x278>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff f8e0 	bl	8000650 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff f8dc 	bl	8000650 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e193      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d036      	beq.n	800152c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_RCC_OscConfig+0x27c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff f8c0 	bl	8000650 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff f8bc 	bl	8000650 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e173      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80014e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x234>
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_RCC_OscConfig+0x27c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff f8a9 	bl	8000650 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e00e      	b.n	8001520 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff f8a5 	bl	8000650 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d907      	bls.n	8001520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e15c      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
 8001514:	40023800 	.word	0x40023800
 8001518:	42470000 	.word	0x42470000
 800151c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ea      	bne.n	8001502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8097 	beq.w	8001668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b83      	ldr	r3, [pc, #524]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b7f      	ldr	r3, [pc, #508]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a7e      	ldr	r2, [pc, #504]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <HAL_RCC_OscConfig+0x4b0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b76      	ldr	r3, [pc, #472]	@ (8001750 <HAL_RCC_OscConfig+0x4b0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a75      	ldr	r2, [pc, #468]	@ (8001750 <HAL_RCC_OscConfig+0x4b0>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff f865 	bl	8000650 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff f861 	bl	8000650 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e118      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b6c      	ldr	r3, [pc, #432]	@ (8001750 <HAL_RCC_OscConfig+0x4b0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x31e>
 80015b0:	4b66      	ldr	r3, [pc, #408]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a65      	ldr	r2, [pc, #404]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x358>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x340>
 80015c6:	4b61      	ldr	r3, [pc, #388]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ca:	4a60      	ldr	r2, [pc, #384]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d2:	4b5e      	ldr	r3, [pc, #376]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	4a5d      	ldr	r2, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x358>
 80015e0:	4b5a      	ldr	r3, [pc, #360]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e4:	4a59      	ldr	r2, [pc, #356]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ec:	4b57      	ldr	r3, [pc, #348]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f0:	4a56      	ldr	r2, [pc, #344]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d015      	beq.n	800162c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff f826 	bl	8000650 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff f822 	bl	8000650 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0d7      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ee      	beq.n	8001608 <HAL_RCC_OscConfig+0x368>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff f810 	bl	8000650 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff f80c 	bl	8000650 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0c1      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	4b40      	ldr	r3, [pc, #256]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80ad 	beq.w	80017cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001672:	4b36      	ldr	r3, [pc, #216]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d060      	beq.n	8001740 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d145      	bne.n	8001712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_RCC_OscConfig+0x4b4>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7fe ffe0 	bl	8000650 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7fe ffdc 	bl	8000650 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e093      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b29      	ldr	r3, [pc, #164]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	071b      	lsls	r3, r3, #28
 80016de:	491b      	ldr	r1, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x4b4>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7fe ffb1 	bl	8000650 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7fe ffad 	bl	8000650 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e064      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x452>
 8001710:	e05c      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_RCC_OscConfig+0x4b4>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7fe ff9a 	bl	8000650 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7fe ff96 	bl	8000650 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e04d      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_RCC_OscConfig+0x4ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x480>
 800173e:	e045      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e040      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_RCC_OscConfig+0x538>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d030      	beq.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d129      	bne.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d122      	bne.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800178e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	4293      	cmp	r3, r2
 8001792:	d119      	bne.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10f      	bne.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e042      	b.n	8001874 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fbf8 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2224      	movs	r2, #36	@ 0x24
 800180c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800181e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f82b 	bl	800187c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800187c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001880:	b0c0      	sub	sp, #256	@ 0x100
 8001882:	af00      	add	r7, sp, #0
 8001884:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001898:	68d9      	ldr	r1, [r3, #12]
 800189a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	ea40 0301 	orr.w	r3, r0, r1
 80018a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80018c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80018d4:	f021 010c 	bic.w	r1, r1, #12
 80018d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80018e2:	430b      	orrs	r3, r1
 80018e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80018f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018f6:	6999      	ldr	r1, [r3, #24]
 80018f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	ea40 0301 	orr.w	r3, r0, r1
 8001902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b8f      	ldr	r3, [pc, #572]	@ (8001b48 <UART_SetConfig+0x2cc>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d005      	beq.n	800191c <UART_SetConfig+0xa0>
 8001910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b8d      	ldr	r3, [pc, #564]	@ (8001b4c <UART_SetConfig+0x2d0>)
 8001918:	429a      	cmp	r2, r3
 800191a:	d104      	bne.n	8001926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800191c:	f7ff fa7c 	bl	8000e18 <HAL_RCC_GetPCLK2Freq>
 8001920:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001924:	e003      	b.n	800192e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001926:	f7ff fa63 	bl	8000df0 <HAL_RCC_GetPCLK1Freq>
 800192a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800192e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001938:	f040 810c 	bne.w	8001b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800193c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001940:	2200      	movs	r2, #0
 8001942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800194a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	1891      	adds	r1, r2, r2
 8001954:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001956:	415b      	adcs	r3, r3
 8001958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800195a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800195e:	4621      	mov	r1, r4
 8001960:	eb12 0801 	adds.w	r8, r2, r1
 8001964:	4629      	mov	r1, r5
 8001966:	eb43 0901 	adc.w	r9, r3, r1
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800197a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800197e:	4690      	mov	r8, r2
 8001980:	4699      	mov	r9, r3
 8001982:	4623      	mov	r3, r4
 8001984:	eb18 0303 	adds.w	r3, r8, r3
 8001988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800198c:	462b      	mov	r3, r5
 800198e:	eb49 0303 	adc.w	r3, r9, r3
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80019a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80019aa:	460b      	mov	r3, r1
 80019ac:	18db      	adds	r3, r3, r3
 80019ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80019b0:	4613      	mov	r3, r2
 80019b2:	eb42 0303 	adc.w	r3, r2, r3
 80019b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80019b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80019c0:	f7fe fc20 	bl	8000204 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4b61      	ldr	r3, [pc, #388]	@ (8001b50 <UART_SetConfig+0x2d4>)
 80019ca:	fba3 2302 	umull	r2, r3, r3, r2
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	011c      	lsls	r4, r3, #4
 80019d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80019d6:	2200      	movs	r2, #0
 80019d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80019dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80019e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	1891      	adds	r1, r2, r2
 80019ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80019ec:	415b      	adcs	r3, r3
 80019ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019f4:	4641      	mov	r1, r8
 80019f6:	eb12 0a01 	adds.w	sl, r2, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	eb43 0b01 	adc.w	fp, r3, r1
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a14:	4692      	mov	sl, r2
 8001a16:	469b      	mov	fp, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8001a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001a22:	464b      	mov	r3, r9
 8001a24:	eb4b 0303 	adc.w	r3, fp, r3
 8001a28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001a40:	460b      	mov	r3, r1
 8001a42:	18db      	adds	r3, r3, r3
 8001a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a46:	4613      	mov	r3, r2
 8001a48:	eb42 0303 	adc.w	r3, r2, r3
 8001a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001a56:	f7fe fbd5 	bl	8000204 <__aeabi_uldivmod>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <UART_SetConfig+0x2d4>)
 8001a62:	fba3 2301 	umull	r2, r3, r3, r1
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2264      	movs	r2, #100	@ 0x64
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	1acb      	subs	r3, r1, r3
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001a76:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <UART_SetConfig+0x2d4>)
 8001a78:	fba3 2302 	umull	r2, r3, r3, r2
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001a84:	441c      	add	r4, r3
 8001a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	1891      	adds	r1, r2, r2
 8001a9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001aa0:	415b      	adcs	r3, r3
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	1851      	adds	r1, r2, r1
 8001aac:	6339      	str	r1, [r7, #48]	@ 0x30
 8001aae:	4649      	mov	r1, r9
 8001ab0:	414b      	adcs	r3, r1
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	00cb      	lsls	r3, r1, #3
 8001ac4:	4651      	mov	r1, sl
 8001ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aca:	4651      	mov	r1, sl
 8001acc:	00ca      	lsls	r2, r1, #3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4642      	mov	r2, r8
 8001ad6:	189b      	adds	r3, r3, r2
 8001ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001adc:	464b      	mov	r3, r9
 8001ade:	460a      	mov	r2, r1
 8001ae0:	eb42 0303 	adc.w	r3, r2, r3
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001af4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001afc:	460b      	mov	r3, r1
 8001afe:	18db      	adds	r3, r3, r3
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b02:	4613      	mov	r3, r2
 8001b04:	eb42 0303 	adc.w	r3, r2, r3
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001b12:	f7fe fb77 	bl	8000204 <__aeabi_uldivmod>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <UART_SetConfig+0x2d4>)
 8001b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	2164      	movs	r1, #100	@ 0x64
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	3332      	adds	r3, #50	@ 0x32
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <UART_SetConfig+0x2d4>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4422      	add	r2, r4
 8001b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001b44:	e106      	b.n	8001d54 <UART_SetConfig+0x4d8>
 8001b46:	bf00      	nop
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b66:	4642      	mov	r2, r8
 8001b68:	464b      	mov	r3, r9
 8001b6a:	1891      	adds	r1, r2, r2
 8001b6c:	6239      	str	r1, [r7, #32]
 8001b6e:	415b      	adcs	r3, r3
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b76:	4641      	mov	r1, r8
 8001b78:	1854      	adds	r4, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb43 0501 	adc.w	r5, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	00eb      	lsls	r3, r5, #3
 8001b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8e:	00e2      	lsls	r2, r4, #3
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	18e3      	adds	r3, r4, r3
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	eb45 0303 	adc.w	r3, r5, r3
 8001ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	008b      	lsls	r3, r1, #2
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bcc:	4621      	mov	r1, r4
 8001bce:	008a      	lsls	r2, r1, #2
 8001bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bd4:	f7fe fb16 	bl	8000204 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4b60      	ldr	r3, [pc, #384]	@ (8001d60 <UART_SetConfig+0x4e4>)
 8001bde:	fba3 2302 	umull	r2, r3, r3, r2
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	011c      	lsls	r4, r3, #4
 8001be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bea:	2200      	movs	r2, #0
 8001bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	1891      	adds	r1, r2, r2
 8001bfe:	61b9      	str	r1, [r7, #24]
 8001c00:	415b      	adcs	r3, r3
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	4641      	mov	r1, r8
 8001c0a:	1851      	adds	r1, r2, r1
 8001c0c:	6139      	str	r1, [r7, #16]
 8001c0e:	4649      	mov	r1, r9
 8001c10:	414b      	adcs	r3, r1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c20:	4659      	mov	r1, fp
 8001c22:	00cb      	lsls	r3, r1, #3
 8001c24:	4651      	mov	r1, sl
 8001c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	00ca      	lsls	r2, r1, #3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	4642      	mov	r2, r8
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	460a      	mov	r2, r1
 8001c40:	eb42 0303 	adc.w	r3, r2, r3
 8001c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001c60:	4649      	mov	r1, r9
 8001c62:	008b      	lsls	r3, r1, #2
 8001c64:	4641      	mov	r1, r8
 8001c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	008a      	lsls	r2, r1, #2
 8001c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c72:	f7fe fac7 	bl	8000204 <__aeabi_uldivmod>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <UART_SetConfig+0x4e4>)
 8001c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2264      	movs	r2, #100	@ 0x64
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	1acb      	subs	r3, r1, r3
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	3332      	adds	r3, #50	@ 0x32
 8001c90:	4a33      	ldr	r2, [pc, #204]	@ (8001d60 <UART_SetConfig+0x4e4>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9c:	441c      	add	r4, r3
 8001c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ca6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001cac:	4642      	mov	r2, r8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	1891      	adds	r1, r2, r2
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	415b      	adcs	r3, r3
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	1851      	adds	r1, r2, r1
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	414b      	adcs	r3, r1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001cd4:	4659      	mov	r1, fp
 8001cd6:	00cb      	lsls	r3, r1, #3
 8001cd8:	4651      	mov	r1, sl
 8001cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cde:	4651      	mov	r1, sl
 8001ce0:	00ca      	lsls	r2, r1, #3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4642      	mov	r2, r8
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cee:	464b      	mov	r3, r9
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	eb42 0303 	adc.w	r3, r2, r3
 8001cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d02:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001d10:	4649      	mov	r1, r9
 8001d12:	008b      	lsls	r3, r1, #2
 8001d14:	4641      	mov	r1, r8
 8001d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d1a:	4641      	mov	r1, r8
 8001d1c:	008a      	lsls	r2, r1, #2
 8001d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001d22:	f7fe fa6f 	bl	8000204 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <UART_SetConfig+0x4e4>)
 8001d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	2164      	movs	r1, #100	@ 0x64
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	3332      	adds	r3, #50	@ 0x32
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <UART_SetConfig+0x4e4>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4422      	add	r2, r4
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d60:	51eb851f 	.word	0x51eb851f

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f7fe fc0c 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 f810 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 f8a6 	bl	8001ec0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d74:	f000 f87a 	bl	8001e6c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8001d78:	2120      	movs	r1, #32
 8001d7a:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <main+0x28>)
 8001d7c:	f7fe ff2b 	bl	8000bd6 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8001d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d84:	f7fe fc70 	bl	8000668 <HAL_Delay>
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8001d88:	bf00      	nop
 8001d8a:	e7f5      	b.n	8001d78 <main+0x14>
 8001d8c:	40020000 	.word	0x40020000

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b094      	sub	sp, #80	@ 0x50
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	2234      	movs	r2, #52	@ 0x34
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f9b4 	bl	800210c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <SystemClock_Config+0xd4>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a29      	ldr	r2, [pc, #164]	@ (8001e64 <SystemClock_Config+0xd4>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <SystemClock_Config+0xd4>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <SystemClock_Config+0xd8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ddc:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <SystemClock_Config+0xd8>)
 8001dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <SystemClock_Config+0xd8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df8:	2310      	movs	r3, #16
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e04:	2310      	movs	r3, #16
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e08:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa3e 	bl	80012a0 <HAL_RCC_OscConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e2a:	f000 f8b7 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2e:	230f      	movs	r3, #15
 8001e30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	2302      	movs	r3, #2
 8001e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fede 	bl	8000c0c <HAL_RCC_ClockConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001e56:	f000 f8a1 	bl	8001f9c <Error_Handler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3750      	adds	r7, #80	@ 0x50
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000

08001e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <MX_USART2_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	@ (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	f7ff fc9a 	bl	80017dc <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eae:	f000 f875 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000002c 	.word	0x2000002c
 8001ebc:	40004400 	.word	0x40004400

08001ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <MX_GPIO_Init+0xd0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4812      	ldr	r0, [pc, #72]	@ (8001f94 <MX_GPIO_Init+0xd4>)
 8001f4c:	f7fe fe2a 	bl	8000ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_GPIO_Init+0xd8>)
 8001f68:	f7fe fc88 	bl	800087c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <MX_GPIO_Init+0xd4>)
 8001f84:	f7fe fc7a 	bl	800087c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	@ 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020800 	.word	0x40020800

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <Error_Handler+0x8>

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fe6:	2007      	movs	r0, #7
 8001fe8:	f7fe fc14 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <HAL_UART_MspInit+0x84>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12b      	bne.n	8002072 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_UART_MspInit+0x88>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <HAL_UART_MspInit+0x88>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_UART_MspInit+0x88>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_UART_MspInit+0x88>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a10      	ldr	r2, [pc, #64]	@ (8002080 <HAL_UART_MspInit+0x88>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_UART_MspInit+0x88>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002052:	230c      	movs	r3, #12
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002062:	2307      	movs	r3, #7
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 800206e:	f7fe fc05 	bl	800087c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	@ 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40004400 	.word	0x40004400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f7fe faa3 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <memset>:
 800210c:	4402      	add	r2, r0
 800210e:	4603      	mov	r3, r0
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	f803 1b01 	strb.w	r1, [r3], #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <__libc_init_array>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	4d0d      	ldr	r5, [pc, #52]	@ (8002154 <__libc_init_array+0x38>)
 8002120:	4c0d      	ldr	r4, [pc, #52]	@ (8002158 <__libc_init_array+0x3c>)
 8002122:	1b64      	subs	r4, r4, r5
 8002124:	10a4      	asrs	r4, r4, #2
 8002126:	2600      	movs	r6, #0
 8002128:	42a6      	cmp	r6, r4
 800212a:	d109      	bne.n	8002140 <__libc_init_array+0x24>
 800212c:	4d0b      	ldr	r5, [pc, #44]	@ (800215c <__libc_init_array+0x40>)
 800212e:	4c0c      	ldr	r4, [pc, #48]	@ (8002160 <__libc_init_array+0x44>)
 8002130:	f000 f818 	bl	8002164 <_init>
 8002134:	1b64      	subs	r4, r4, r5
 8002136:	10a4      	asrs	r4, r4, #2
 8002138:	2600      	movs	r6, #0
 800213a:	42a6      	cmp	r6, r4
 800213c:	d105      	bne.n	800214a <__libc_init_array+0x2e>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	f855 3b04 	ldr.w	r3, [r5], #4
 8002144:	4798      	blx	r3
 8002146:	3601      	adds	r6, #1
 8002148:	e7ee      	b.n	8002128 <__libc_init_array+0xc>
 800214a:	f855 3b04 	ldr.w	r3, [r5], #4
 800214e:	4798      	blx	r3
 8002150:	3601      	adds	r6, #1
 8002152:	e7f2      	b.n	800213a <__libc_init_array+0x1e>
 8002154:	0800219c 	.word	0x0800219c
 8002158:	0800219c 	.word	0x0800219c
 800215c:	0800219c 	.word	0x0800219c
 8002160:	080021a0 	.word	0x080021a0

08002164 <_init>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	bf00      	nop
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr

08002170 <_fini>:
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002172:	bf00      	nop
 8002174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002176:	bc08      	pop	{r3}
 8002178:	469e      	mov	lr, r3
 800217a:	4770      	bx	lr
